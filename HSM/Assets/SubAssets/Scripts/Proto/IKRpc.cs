//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: IKCliRpc.proto
// Note: requires additional types generated from: PublicStruct.proto
namespace GenPB
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"IKRpcsyncNotify")]
  public partial class IKRpcsyncNotify : global::ProtoBuf.IExtensible
  {
    public IKRpcsyncNotify() {}
    
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"IKJoint")]
  public partial class IKJoint : global::ProtoBuf.IExtensible
  {
    public IKJoint() {}
    
    private int _Id = (int)-1;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"Id", DataFormat = global::ProtoBuf.DataFormat.ZigZag)]
    [global::System.ComponentModel.DefaultValue((int)-1)]
    public int Id
    {
      get { return _Id; }
      set { _Id = value; }
    }
    private int _JointType = (int)0;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"JointType", DataFormat = global::ProtoBuf.DataFormat.ZigZag)]
    [global::System.ComponentModel.DefaultValue((int)0)]
    public int JointType
    {
      get { return _JointType; }
      set { _JointType = value; }
    }
    private string _Target = "";
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"Target", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string Target
    {
      get { return _Target; }
      set { _Target = value; }
    }
    private float _Weight = (float)1;
    [global::ProtoBuf.ProtoMember(4, IsRequired = false, Name=@"Weight", DataFormat = global::ProtoBuf.DataFormat.FixedSize)]
    [global::System.ComponentModel.DefaultValue((float)1)]
    public float Weight
    {
      get { return _Weight; }
      set { _Weight = value; }
    }
    private readonly global::System.Collections.Generic.List<int> _ChildList = new global::System.Collections.Generic.List<int>();
    [global::ProtoBuf.ProtoMember(5, Name=@"ChildList", DataFormat = global::ProtoBuf.DataFormat.ZigZag)]
    public global::System.Collections.Generic.List<int> ChildList
    {
      get { return _ChildList; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"IKData")]
  public partial class IKData : global::ProtoBuf.IExtensible
  {
    public IKData() {}
    
    private string _FileName = "";
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"FileName", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string FileName
    {
      get { return _FileName; }
      set { _FileName = value; }
    }
    private readonly global::System.Collections.Generic.List<IKJoint> _JointList = new global::System.Collections.Generic.List<IKJoint>();
    [global::ProtoBuf.ProtoMember(2, Name=@"JointList", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<IKJoint> JointList
    {
      get { return _JointList; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}